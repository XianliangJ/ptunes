:- module(flexlm).
:- reexport licence_checkout / 6, licence_heartbeat / 4, licence_checkin / 1, licence_held / 1 from sepia_kernel.
:- comment(categories, ["Interfacing"]).
:- comment(summary, "Interface to Flexlm licence manager").
:- comment(copyright, "Cisco Systems, Inc").
:- comment(date, "$Date: 2009/02/19 07:24:43 $").
:- comment(desc, html("\tThe predicates described here are actually implemented in\n\tin the sepia_kernel module and can be called without loading\n\tthe flexlm library.\n    ")).
:- comment(licence_checkin / 1, [summary : "Check in a FlexLM licence", amode : licence_checkin(+), args : ["Feature" : "String or atom"], fail_if : "None", desc : html("\n\tThis maps to lp_checkin() of the FlexLM simple API.\n\t<P>\n\tIf called with a feature name that does not exist or has not\n\tbeen checked out, the predicate silently succeeds.\n\t<P>\n\tIf the given feature has been checked out multiply, make sure\n\tyou do as many calls to licence_checkin/1 as you have done to\n\tlicence_checkout/6.\n    "), see_also : [licence_checkout / 6, licence_heartbeat / 4, licence_held / 1], eg : "\n\t...,\n    \tsepia_kernel:licence_checkin(swapper),\n\t...\n    "]).
:- comment(licence_checkout / 6, [summary : "Check out a licenced feature from FlexLM", amode : licence_checkout(+, ++, +, +, -, -), args : ["Feature" : "String or atom", "Policy" : "List of atoms", "Version" : "String", "Path" : "String, possibly empty", "Message" : "Returns error/warning message, if any", "Status" : "Returns one of the atoms ok, warning, error"], fail_if : "None", desc : html("\n\tThis maps directly to lp_checkout() of the FlexLM simple API.\n<DL>\n\t<DT>Feature<DD>\n\tis the name of the feature to be checked out, passed directly\n\tto FlexLM.\n\n\t<DT>Policy<DD>\n\tis a list of atoms, containing one of\n\t<UL>\n\t<LI><EM>restrictive</EM> (the default), <EM>queue</EM>,\n\t\t<EM>failsafe</EM>, <EM>lenient</EM>\n\t</UL>\n\tand possibly one or more of\n\t<UL>\n\t<LI><EM>retry_restrictive</EM>\n\t<LI><EM>check_baddate</EM>\n\t<LI><EM>flexlock</EM>\n\t</UL>\n\tNote that LM_MANUAL_HEARTBEAT will always be set.  An empty\n\tlist defaults to LM_RESTRICTIVE|LM_MANUAL_HEARTBEAT.\n\n\t<DT>Version<DD>\n\tis a version string, passed directly to FlexLM.\n\n\t<DT>Path<DD>\n\tis the name of the licence file.  If the empty string is\n\tgiven, it defaults to \"licence.dat\" in the ECLiPSe top-level\n\tinstallation directory.\n\n\tThe lp_handle is not visible and stored internally by ECLiPSe. \n\tThe feature name is used to identify the checked out licence\n\ton the Eclipse level.\n\n\t<DT>Status<DD>\n\twill be bound to one of the atoms <EM>ok</EM>,<EM>warning</EM>,\n\t<EM>error</EM>\n\n\t<DT>Message<DD>\n\twill be bound to an error or warning message string in case\n\tthe Status is not <EM>ok</EM>\n</DL>\n\tMultiple checkouts of the same feature are allowed, but only if\n\tthey are for the same Policy and Version. \n    "), see_also : [get_flag / 2, licence_heartbeat / 4, licence_checkin / 1, licence_held / 1], eg : "\n    ?- sepia_kernel:licence_checkout(swapper, [restrictive], \"2.0\", \"\", Msg, Status),\n    \t( Status = error ->\n\t    writeln(error, Msg),\n\t    abort\n\t;\n\t    writeln(warning_output, Msg)\n\t;\n\t    true\n\t).\n    "]).
:- comment(licence_heartbeat / 4, [summary : "Refresh a checked out FlexLM licence", amode : licence_heartbeat(+, +, -, -), args : ["Feature" : "String or atom", "Minutes" : "Integer", "Reconnects" : "Returns count of reconnects within last Minutes minutes", "FailedReconnects" : "Returns 0 if ok, otherwise count of failed reconnects"], fail_if : "Fails if the given feature has not been checked out", desc : html("\n\tThis maps directly to lp_heartbeat() of the FlexLM simple API.\n\t<P>\n\tAn application should call licence_heartbeat/4 occasionally (e.g.\n\tevery few minutes) in order to make sure that the licence server\n\tis still running. When everything is ok, zero is returned in the\n\tlast argument, otherwise the number of failed connection attempts.\n\t<P>\n\tThe second and third argument allow to check whether the licence\n\tserver has been shut down and restarted. If that happens, the\n\theartbeat call will reconnect to the server. If many such\n\treconnects happen in a short amount of time, this is suspicious\n\tand may indicate an attempt to illegally obtain more licences.\n\t<P>\n\tIf a feature had been checked out multiply, a heartbeat is performed\n\tfor every checked out licence, and the reconnection counts are\n\tadded up.\n    "), see_also : [licence_checkout / 6, licence_checkin / 1, licence_held / 1], eg : "\n\t...,\n    \t( sepia_kernel:licence_heartbeat(swapper, 10, R, 0) ->\n\t    ( R > 3 ->\n\t\twriteln(error, \"Licence server suspicious\"),\n\t\tabort\n\t    ;\n\t\ttrue\n\t    )\n\t;\n\t    writeln(error, \"Licence server not responding\"),\n\t    abort\n\t),\n\t...\n    "]).
:- comment(licence_held / 1, [summary : "Check whether we already have a licence for a particular feature", amode : licence_held(+), args : ["Feature" : "String or atom"], fail_if : "Licence hasn't been checked out", desc : html("\n\tThis checks whether a licence for the given feature has already\n\tbeen checked out by this process, i.e. whether licence_checkout/6\n\thas been called successfully earlier.\n    "), see_also : [licence_checkout / 6, licence_heartbeat / 4, licence_checkin / 1], eg : "\n\t...,\n    \t( sepia_kernel:licence_held(swapper) ->\n\t    true\n\t;\n\t    sepia_kernel:licence_checkout(swapper, ..., ..., ..., ..., ...)\n\t    ...\n\t),\n\t...\n    "]).
